//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MillenniumTools.Common {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MillenniumTools.Common.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alarm sound volume (0-100).
        /// </summary>
        public static string AlarmSoundVolumeConfigProperty {
            get {
                return ResourceManager.GetString("AlarmSoundVolumeConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alarm Volume:.
        /// </summary>
        public static string AlarmVolumeText {
            get {
                return ResourceManager.GetString("AlarmVolumeText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authenticated.
        /// </summary>
        public static string AuthenticatedHeader {
            get {
                return ResourceManager.GetString("AuthenticatedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Availability.
        /// </summary>
        public static string AvailabilityHeader {
            get {
                return ResourceManager.GetString("AvailabilityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear Pings.
        /// </summary>
        public static string ClearPingsText {
            get {
                return ResourceManager.GetString("ClearPingsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear ping values, thus stopping alarms and clearing the chart.
        /// </summary>
        public static string ClearPingsTooltip {
            get {
                return ResourceManager.GetString("ClearPingsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout for connecting to web interfaces..
        /// </summary>
        public static string ClientTimeoutConfigProperty {
            get {
                return ResourceManager.GetString("ClientTimeoutConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MillenniumTools configuration file. Created by Siderite (siderite@madnet.ro).
        /// </summary>
        public static string ConfigurationFileHeader {
            get {
                return ResourceManager.GetString("ConfigurationFileHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure.
        /// </summary>
        public static string ConfigureText {
            get {
                return ResourceManager.GetString("ConfigureText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change configuration.
        /// </summary>
        public static string ConfigureTooltip {
            get {
                return ResourceManager.GetString("ConfigureTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not determine an IP for this address.
        /// </summary>
        public static string CouldNotDetermineIpText {
            get {
                return ResourceManager.GetString("CouldNotDetermineIpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Device under configured availability threshold.
        /// </summary>
        public static string DeviceAlarmText {
            get {
                return ResourceManager.GetString("DeviceAlarmText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Percentage of availability under which a device will cause a sound beep to be sounded (0 means never).
        /// </summary>
        public static string DeviceAlarmThresholdConfigProperty {
            get {
                return ResourceManager.GetString("DeviceAlarmThresholdConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Direct Access.
        /// </summary>
        public static string DirectAccessHeader {
            get {
                return ResourceManager.GetString("DirectAccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IP Addresses of the extenders, comma separated. Make sure the extenders have a static IP address configured..
        /// </summary>
        public static string ExtenderIPsConfigProperty {
            get {
                return ResourceManager.GetString("ExtenderIPsConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extender interface password. Make sure the same password is configured on all extenders..
        /// </summary>
        public static string ExtenderPasswordConfigProperty {
            get {
                return ResourceManager.GetString("ExtenderPasswordConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset device - this will be done automatically when up time is larger than {0:0.##} hours.
        /// </summary>
        public static string ExtenderRebootText {
            get {
                return ResourceManager.GetString("ExtenderRebootText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extender interface username. Make sure the same username is configured on all extenders..
        /// </summary>
        public static string ExtenderUsernameConfigProperty {
            get {
                return ResourceManager.GetString("ExtenderUsernameConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is set to true, more expensive network operations could be performed to gather more information..
        /// </summary>
        public static string GetAdditionalNetworkInfoConfigProperty {
            get {
                return ResourceManager.GetString("GetAdditionalNetworkInfoConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP Access.
        /// </summary>
        public static string HTTPAccessHeader {
            get {
                return ResourceManager.GetString("HTTPAccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IP.
        /// </summary>
        public static string IPHeader {
            get {
                return ResourceManager.GetString("IPHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, the alarm will not sound.
        /// </summary>
        public static string IsMutedConfigProperty {
            get {
                return ResourceManager.GetString("IsMutedConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum time interval before a device is restarted (format days.hours:minutes:seconds).
        /// </summary>
        public static string MaximumDeviceAgeConfigProperty {
            get {
                return ResourceManager.GetString("MaximumDeviceAgeConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum ping information to keep in memory. The ping information is used to draw the chart..
        /// </summary>
        public static string MaxPingsInMemoryConfigProperty {
            get {
                return ResourceManager.GetString("MaxPingsInMemoryConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If GetAdditionalNetworkInfo is set, this is the time in which every machine on the subnet is being pinged. It helps with the correlation between MAC address and IP address.
        /// </summary>
        public static string PingEntireSubnetIntervalConfigProperty {
            get {
                return ResourceManager.GetString("PingEntireSubnetIntervalConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time interval covered by the ping chart (format days.hours:minutes:seconds).
        /// </summary>
        public static string PingGraphTimeSizeConfigProperty {
            get {
                return ResourceManager.GetString("PingGraphTimeSizeConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time in which the devices are being pinged to check availability and refresh the chart (format days.hours:minutes:seconds).
        /// </summary>
        public static string PingIntervalConfigProperty {
            get {
                return ResourceManager.GetString("PingIntervalConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout of ping requests (format days.hours:minutes:seconds).
        /// </summary>
        public static string PingTimeoutConfigProperty {
            get {
                return ResourceManager.GetString("PingTimeoutConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reboot Device.
        /// </summary>
        public static string RebootDeviceHeader {
            get {
                return ResourceManager.GetString("RebootDeviceHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reboot.
        /// </summary>
        public static string RebootText {
            get {
                return ResourceManager.GetString("RebootText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Receive Speed.
        /// </summary>
        public static string ReceiveSpeedHeader {
            get {
                return ResourceManager.GetString("ReceiveSpeedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of hosts or IP addresses to ping for reference (for example google.com and the first hop towards the Internet). This helps to understand the status of the external network..
        /// </summary>
        public static string ReferenceIPsConfigProperty {
            get {
                return ResourceManager.GetString("ReferenceIPsConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh list (F5).
        /// </summary>
        public static string ReloadCommandText {
            get {
                return ResourceManager.GetString("ReloadCommandText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time in which to automatically refresh the status of the devices on the network (format days.hours:minutes:seconds).
        /// </summary>
        public static string ReloadIntervalConfigProperty {
            get {
                return ResourceManager.GetString("ReloadIntervalConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh device list and related information - this occurs automatically every {0:0.##} minutes.
        /// </summary>
        public static string ReloadText {
            get {
                return ResourceManager.GetString("ReloadText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resets the device.
        /// </summary>
        public static string ResetsDeviceText {
            get {
                return ResourceManager.GetString("ResetsDeviceText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset router Wi-fi - this takes about 10 seconds.
        /// </summary>
        public static string ResetsWifiText {
            get {
                return ResourceManager.GetString("ResetsWifiText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many times the router must be under the wifi threshold before it restarts (0 means never).
        /// </summary>
        public static string RestartRouterCountConfigProperty {
            get {
                return ResourceManager.GetString("RestartRouterCountConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restart Router.
        /// </summary>
        public static string RestartRouterText {
            get {
                return ResourceManager.GetString("RestartRouterText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restart router - this will take approximately 4 minutes.
        /// </summary>
        public static string RestartRouterTooltip {
            get {
                return ResourceManager.GetString("RestartRouterTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Percentage of availability under which the router Wi-fi will be reset (0 means never).
        /// </summary>
        public static string RestartRouterWifiThresholdConfigProperty {
            get {
                return ResourceManager.GetString("RestartRouterWifiThresholdConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IP Address of the router.
        /// </summary>
        public static string RouterIPConfigProperty {
            get {
                return ResourceManager.GetString("RouterIPConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The router interface password.
        /// </summary>
        public static string RouterPasswordConfigProperty {
            get {
                return ResourceManager.GetString("RouterPasswordConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of times when availability was below configured level. After it reaches {0}, the router will automatically reset the Wi-Fi, if possible..
        /// </summary>
        public static string RouterShouldBeRestartedText {
            get {
                return ResourceManager.GetString("RouterShouldBeRestartedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The router interface username.
        /// </summary>
        public static string RouterUsernameConfigProperty {
            get {
                return ResourceManager.GetString("RouterUsernameConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running.
        /// </summary>
        public static string RunningHeader {
            get {
                return ResourceManager.GetString("RunningHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set to true in order to see ! warnings on the chart when ping fails.
        /// </summary>
        public static string ShowPingWarningsOnChartConfigProperty {
            get {
                return ResourceManager.GetString("ShowPingWarningsOnChartConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The smoothness of the chart. Value from 0.0 to 1.0.
        /// </summary>
        public static string SmoothnessConfigProperty {
            get {
                return ResourceManager.GetString("SmoothnessConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time interval covered by the speed chart (format days.hours:minutes:seconds).
        /// </summary>
        public static string SpeedGraphTimeSizeConfigProperty {
            get {
                return ResourceManager.GetString("SpeedGraphTimeSizeConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start with Windows.
        /// </summary>
        public static string StartWithWindowsText {
            get {
                return ResourceManager.GetString("StartWithWindowsText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, MillenniumTools will start at boot time.
        /// </summary>
        public static string StartWithWindowsTooltip {
            get {
                return ResourceManager.GetString("StartWithWindowsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transmit Speed.
        /// </summary>
        public static string TransmitSpeedHeader {
            get {
                return ResourceManager.GetString("TransmitSpeedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Up Time.
        /// </summary>
        public static string UpTimeHeader {
            get {
                return ResourceManager.GetString("UpTimeHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The browser declared when connecting to web interfaces.
        /// </summary>
        public static string UserAgentConfigProperty {
            get {
                return ResourceManager.GetString("UserAgentConfigProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set this to true to use the standard Ping class..
        /// </summary>
        public static string UseStandardPingConfigProperty {
            get {
                return ResourceManager.GetString("UseStandardPingConfigProperty", resourceCulture);
            }
        }
    }
}
